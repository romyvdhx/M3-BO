//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/PlayerActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerActions"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""ca3f6c04-2abf-4d4f-a1b0-e4265fb5a75b"",
            ""actions"": [
                {
                    ""name"": ""GrabBow"",
                    ""type"": ""Button"",
                    ""id"": ""3d4a40b2-4d1b-4ec0-a96f-b462a458c96a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PutAwayBow"",
                    ""type"": ""Button"",
                    ""id"": ""3083f095-9199-4172-94bb-9d91d3cd0147"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dance"",
                    ""type"": ""Button"",
                    ""id"": ""5fa9f8bc-1858-4501-9a92-eaaaebcf745d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b5b0b611-6015-47e5-bf2a-321095956bab"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GrabBow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""560c0633-9dfa-4858-a4d8-728dc33da6de"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PutAwayBow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bac2bd04-a02e-4166-8298-d1c53182907e"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dance"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_GrabBow = m_Gameplay.FindAction("GrabBow", throwIfNotFound: true);
        m_Gameplay_PutAwayBow = m_Gameplay.FindAction("PutAwayBow", throwIfNotFound: true);
        m_Gameplay_Dance = m_Gameplay.FindAction("Dance", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private List<IGameplayActions> m_GameplayActionsCallbackInterfaces = new List<IGameplayActions>();
    private readonly InputAction m_Gameplay_GrabBow;
    private readonly InputAction m_Gameplay_PutAwayBow;
    private readonly InputAction m_Gameplay_Dance;
    public struct GameplayActions
    {
        private @PlayerActions m_Wrapper;
        public GameplayActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @GrabBow => m_Wrapper.m_Gameplay_GrabBow;
        public InputAction @PutAwayBow => m_Wrapper.m_Gameplay_PutAwayBow;
        public InputAction @Dance => m_Wrapper.m_Gameplay_Dance;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void AddCallbacks(IGameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_GameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Add(instance);
            @GrabBow.started += instance.OnGrabBow;
            @GrabBow.performed += instance.OnGrabBow;
            @GrabBow.canceled += instance.OnGrabBow;
            @PutAwayBow.started += instance.OnPutAwayBow;
            @PutAwayBow.performed += instance.OnPutAwayBow;
            @PutAwayBow.canceled += instance.OnPutAwayBow;
            @Dance.started += instance.OnDance;
            @Dance.performed += instance.OnDance;
            @Dance.canceled += instance.OnDance;
        }

        private void UnregisterCallbacks(IGameplayActions instance)
        {
            @GrabBow.started -= instance.OnGrabBow;
            @GrabBow.performed -= instance.OnGrabBow;
            @GrabBow.canceled -= instance.OnGrabBow;
            @PutAwayBow.started -= instance.OnPutAwayBow;
            @PutAwayBow.performed -= instance.OnPutAwayBow;
            @PutAwayBow.canceled -= instance.OnPutAwayBow;
            @Dance.started -= instance.OnDance;
            @Dance.performed -= instance.OnDance;
            @Dance.canceled -= instance.OnDance;
        }

        public void RemoveCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_GameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);
    public interface IGameplayActions
    {
        void OnGrabBow(InputAction.CallbackContext context);
        void OnPutAwayBow(InputAction.CallbackContext context);
        void OnDance(InputAction.CallbackContext context);
    }
}
